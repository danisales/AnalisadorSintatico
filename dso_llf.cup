package cup;

import java_cup.runtime.*;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import Lexer;
import ast.*;
import visitor.*;

parser code {:
  protected Lexer lexer;
:}

init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

terminal AND, LESST, EQUALOP, NOTEQUAL, PLUS, MINUS, TIMES, NOT, SEMI,
         DOT, COMMA, EQUAL, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET,
         BOOL, CLASS, PUBLIC, EXTENDS, STATIC, VOID, MAIN, STRING, INT, WHILE, IF,
         ELSE, RETURN, LENGTH, THIS, NEW, SYSO;
terminal Boolean TRUE, FALSE;
terminal Integer INTEGER;
terminal String ID;

non terminal Program goal;

non terminal MainClass mainClass;

non terminal ClassDecl classDecl;
non terminal ClassDeclList classList;

non terminal Identifier ident;

non terminal Statement stmt;
non terminal Statemant stmtList;

non terminal VarDeclaration varDecl;
non terminal VarDeclarationList varList;

non terminal MethodDeclaration methodDecl;
non terminal MethodDeclarationList methodList;

non terminal Exp expr;
non terminal ExpList exprList;

non terminal Type type;

//Precedências
//http://cseweb.ucsd.edu/~ricko/CSE11/Java_Operator_Precedence_Table.pdf

precedence right EQUAL;
precedence left AND;
precedence left EQUALOP, NOTEQUAL;
precedence left LESST;
precedence left PLUS, MINUS;
precedence left TIMES;
precedence right NOT, NEW;
precedence left DOT;

/* Gramática usada
Goal ::= MainClass ( ClassDeclaration )* <EOF>

MainClass ::= "class" Identifier "{" "public" "static" "void" "main" "(" "String" "[" "]" Identifier ")"
"{" Statement "}" "}"

ClassDeclaration ::= "class" Identifier ( "extends" Identifier )? "{" ( VarDeclaration )* (
MethodDeclaration )* "}"

VarDeclaration ::= Type Identifier ";"

MethodDeclaration ::= "public" Type Identifier "(" ( Type Identifier ( "," Type Identifier )* )? ")" "{" (
VarDeclaration )* ( Statement )* "return" Expression ";" "}"

Type ::= "int" "[" "]"
| "boolean"
| "int"
| Identifier

Statement ::= "{" ( Statement )* "}"
| "if" "(" Expression ")" Statement "else" Statement
| "while" "(" Expression ")" Statement
| "System.out.println" "(" Expression ")" ";"
| Identifier "=" Expression ";"
| Identifier "[" Expression "]" "=" Expression ";"

Expression ::= Expression ( "&&" | "<" | "+" | "­" | "*" ) Expression
| Expression "[" Expression "]"
| Expression "." "length"
| Expression "." Identifier "(" ( Expression ( "," Expression )* )? ")"
| <INTEGER_LITERAL>
| "true"
| "false"
| Identifier
| "this"
| "new" "int" "[" Expression "]"
| "new" Identifier "(" ")"
| "!" Expression
| "(" Expression ")"

Identifier ::= <IDENTIFIER> */